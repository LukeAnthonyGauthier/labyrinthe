{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\labyrinthe\\\\src\\\\App.js\";\nimport React from \"react\";\nimport Graph from \"react-graph-vis\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport GraphAfficher from \"./class/graph\";\nimport Route from \"./class/route\";\nimport Node from \"./class/node\";\nimport PriorityQueue from 'priorityqueuejs';\nconst options = {\n  nodes: {\n    shape: \"square\",\n    size: 40\n  },\n  layout: {\n    hierarchical: false,\n    randomSeed: 0\n  },\n  interaction: {\n    dragNodes: false,\n    dragView: false\n  },\n  physics: {\n    enabled: false\n  },\n  edges: {\n    color: \"#000000\",\n    arrows: {\n      to: false\n    }\n  },\n  height: \"500px\"\n};\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.graphe = new GraphAfficher([new Node(0, 0, 0, \"green\"), new Node(1, 0, 100, \"gray\"), new Node(2, 0, 200, \"gray\"), new Node(3, 0, 300, \"gray\"), new Node(4, 0, 400, \"gray\"), new Node(5, 100, 200, \"gray\"), new Node(6, 100, 400, \"gray\"), new Node(7, 200, 0, \"gray\"), new Node(8, 200, 100, \"gray\"), new Node(9, 200, 200, \"gray\"), new Node(10, 200, 300, \"gray\"), new Node(11, 200, 400, \"gray\"), new Node(12, 300, 0, \"gray\"), new Node(13, 300, 400, \"gray\"), new Node(14, 400, 0, \"gray\"), new Node(15, 400, 100, \"red\"), new Node(16, 400, 200, \"gray\"), new Node(17, 400, 300, \"gray\"), new Node(18, 400, 400, \"gray\")], [new Route(0, 1), new Route(1, 2), new Route(2, 3), new Route(3, 4), new Route(2, 5), new Route(4, 6), new Route(5, 9), new Route(6, 11), new Route(9, 8), new Route(9, 10), new Route(10, 11), new Route(8, 7), new Route(7, 12), new Route(12, 14), new Route(14, 15), new Route(11, 13), new Route(13, 18), new Route(18, 17), new Route(17, 16), new Route(16, 15)]);\n    this.state = {\n      graphe: this.graphe\n    };\n  }\n\n  parcourirDijkstra(noeudDepart) {\n    let tableauDesChemins = this.creationTableauDistance(noeudDepart);\n    let queue = this.creationQueue(noeudDepart); // pendant que la queue est encore pleine\n\n    while (!queue.isEmpty()) {\n      let noeud = queue.deq();\n      noeud.verifier = true;\n      let edgeNoeud = this.state.graphe.edges.filter(edge => edge.to === noeud.id || edge.from === noeud.id);\n      edgeNoeud.forEach(edge => {\n        if (edge.to !== noeud.id && this.graphe.nodes[edge.to].verifier !== true) {\n          let prochainNodeID = edge.to;\n          let nouvelleDistance = tableauDesChemins[noeud.id].distance + edge.poid;\n          compareDistance(prochainNodeID, nouvelleDistance, noeud);\n        } else if (this.graphe.nodes[edge.from].verifier !== true) {\n          let prochainNodeID = edge.form;\n          let nouvelleDistance = tableauDesChemins[noeud.id].distance + edge.poid;\n          compareDistance(prochainNodeID, nouvelleDistance, noeud);\n        }\n      });\n    } //Choisir le noeud non-visité ayant la valeur la plus petite en tant que noeud actuel NA\n    //Pour chaque voisin V non-visité du noeud actuel\n    //Additionner la valeur de l’arête qui les relie et la valeur du noeud actuel NA\n    //Si cette addition est plus petite que la valeur du voisin V, assigner cette nouvelle valeur à V\n    //Marquer le noeud actuel NA comme visité\n    //Tant qu’il reste des noeuds non-visités recommencer à l’étape 1\n\n  }\n\n  creationTableauDistance(noeudDepart) {\n    return this.graphe.nodes.map(node => {\n      if (node.id === noeudDepart.id) {\n        return {\n          noeud: node.id,\n          distance: 0\n        };\n      } else {\n        return {\n          noeud: node.id,\n          distance: Number.MAX_VALUE,\n          precedent: undefined\n        };\n      }\n    });\n  }\n\n  creationQueue(noeudDepart) {\n    let queue = new PriorityQueue((a, b) => {\n      return b.priorite - a.priorite;\n    });\n    noeudDepart.priorite = 0;\n    queue.enq(noeudDepart);\n    return queue;\n  }\n\n  compareDistance(prochainNodeID, nouvelleDistance, noeud) {\n    if (tableauDesChemins[prochainNodeID].disetance >= nouvelleDistance) {\n      tableauDesChemins[prochainNodeID].distance = nouvelleDistance;\n      tableauDesChemins[prochainNodeID].precedent = noeud.id;\n      this.graphe.nodes[prochainNodeID].priorite = nouvelleDistance;\n      queue.enq(this.graphe.nodes[prochainNodeID]);\n    }\n  }\n\n  render() {\n    this.graphe.nodes[0].verifier = true;\n    this.parcourirDijkstra(this.graphe.nodes[0]);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Graph, {\n      key: uuidv4(),\n      graph: this.state.graphe,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/React/labyrinthe/src/App.js"],"names":["React","Graph","v4","uuidv4","GraphAfficher","Route","Node","PriorityQueue","options","nodes","shape","size","layout","hierarchical","randomSeed","interaction","dragNodes","dragView","physics","enabled","edges","color","arrows","to","height","App","Component","constructor","props","graphe","state","parcourirDijkstra","noeudDepart","tableauDesChemins","creationTableauDistance","queue","creationQueue","isEmpty","noeud","deq","verifier","edgeNoeud","filter","edge","id","from","forEach","prochainNodeID","nouvelleDistance","distance","poid","compareDistance","form","map","node","Number","MAX_VALUE","precedent","undefined","a","b","priorite","enq","disetance","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Graph from \"react-graph-vis\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport GraphAfficher from \"./class/graph\";\nimport Route from \"./class/route\";\nimport Node from \"./class/node\";\nimport PriorityQueue from 'priorityqueuejs';\n\nconst options = {\n  nodes: {\n    shape: \"square\",\n    size: 40,\n  },\n  layout: {\n    hierarchical: false,\n    randomSeed: 0,\n  },\n  interaction: {\n    dragNodes: false,\n    dragView: false,\n  },\n  physics: {\n    enabled: false,\n  },\n  edges: {\n    color: \"#000000\",\n    arrows: {\n      to: false,\n    },\n  },\n  height: \"500px\",\n\n};\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.graphe = new GraphAfficher(\n      [\n        new Node(0, 0, 0, \"green\"),\n        new Node(1, 0, 100, \"gray\"),\n        new Node(2, 0, 200, \"gray\"),\n        new Node(3, 0, 300, \"gray\"),\n        new Node(4, 0, 400, \"gray\"),\n        new Node(5, 100, 200, \"gray\"),\n        new Node(6, 100, 400, \"gray\"),\n        new Node(7, 200, 0, \"gray\"),\n        new Node(8, 200, 100, \"gray\"),\n        new Node(9, 200, 200, \"gray\"),\n        new Node(10, 200, 300, \"gray\"),\n        new Node(11, 200, 400, \"gray\"),\n        new Node(12, 300, 0, \"gray\"),\n        new Node(13, 300, 400, \"gray\"),\n        new Node(14, 400, 0, \"gray\"),\n        new Node(15, 400, 100, \"red\"),\n        new Node(16, 400, 200, \"gray\"),\n        new Node(17, 400, 300, \"gray\"),\n        new Node(18, 400, 400, \"gray\"),\n      ],\n      [\n        new Route(0, 1),\n        new Route(1, 2),\n        new Route(2, 3),\n        new Route(3, 4),\n        new Route(2, 5),\n        new Route(4, 6),\n        new Route(5, 9),\n        new Route(6, 11),\n        new Route(9, 8),\n        new Route(9, 10),\n        new Route(10, 11),\n        new Route(8, 7),\n        new Route(7, 12),\n        new Route(12, 14),\n        new Route(14, 15),\n        new Route(11, 13),\n        new Route(13, 18),\n        new Route(18, 17),\n        new Route(17, 16),\n        new Route(16, 15),\n\n      ]\n    )\n    this.state = {\n      graphe: this.graphe\n    }\n\n  }\n\n  parcourirDijkstra(noeudDepart) {\n\n    let tableauDesChemins = this.creationTableauDistance(noeudDepart)\n\n    let queue = this.creationQueue(noeudDepart);\n\n    // pendant que la queue est encore pleine\n    while (!queue.isEmpty()) {\n      let noeud = queue.deq();\n      noeud.verifier = true;\n\n\n      let edgeNoeud = this.state.graphe.edges.filter(edge => (edge.to === noeud.id || edge.from === noeud.id));\n\n      edgeNoeud.forEach(edge => {\n        if (edge.to !== noeud.id && this.graphe.nodes[edge.to].verifier !== true) {\n          let prochainNodeID = edge.to;\n          let nouvelleDistance = tableauDesChemins[noeud.id].distance + edge.poid;\n          compareDistance(prochainNodeID, nouvelleDistance, noeud);\n        \n\n\n        } else if (this.graphe.nodes[edge.from].verifier !== true) {\n          let prochainNodeID = edge.form;\n          let nouvelleDistance = tableauDesChemins[noeud.id].distance + edge.poid;\n          compareDistance(prochainNodeID, nouvelleDistance, noeud);\n        }\n\n\n      });\n\n    }\n\n    //Choisir le noeud non-visité ayant la valeur la plus petite en tant que noeud actuel NA\n    //Pour chaque voisin V non-visité du noeud actuel\n    //Additionner la valeur de l’arête qui les relie et la valeur du noeud actuel NA\n    //Si cette addition est plus petite que la valeur du voisin V, assigner cette nouvelle valeur à V\n    //Marquer le noeud actuel NA comme visité\n    //Tant qu’il reste des noeuds non-visités recommencer à l’étape 1\n\n\n  }\n  creationTableauDistance(noeudDepart) {\n    return this.graphe.nodes.map(node => {\n      if (node.id === noeudDepart.id) {\n        return {\n          noeud: node.id,\n          distance: 0,\n        }\n      } else {\n        return {\n          noeud: node.id,\n          distance: Number.MAX_VALUE,\n          precedent: undefined,\n        }\n      }\n    });\n  }\n\n  creationQueue(noeudDepart) {\n    let queue = new PriorityQueue((a, b) => {\n      return b.priorite - a.priorite;\n    });\n    noeudDepart.priorite = 0;\n    queue.enq(noeudDepart);\n    return queue;\n  }\n\n  compareDistance(prochainNodeID, nouvelleDistance, noeud){\n    if(tableauDesChemins[prochainNodeID].disetance >= nouvelleDistance){\n      tableauDesChemins[prochainNodeID].distance = nouvelleDistance;\n      tableauDesChemins[prochainNodeID].precedent = noeud.id;\n      this.graphe.nodes[prochainNodeID].priorite = nouvelleDistance;\n      queue.enq(this.graphe.nodes[prochainNodeID])\n    }\n\n  }\n\n\n  render() {\n    this.graphe.nodes[0].verifier = true;\n    this.parcourirDijkstra(this.graphe.nodes[0]);\n\n    return (\n      <div>\n        <Graph\n          key={uuidv4()}\n          graph={this.state.graphe}\n          options={options}\n        />\n      </div>\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}