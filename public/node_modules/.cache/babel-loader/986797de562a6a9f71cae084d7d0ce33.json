{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\labyrinthe\\\\src\\\\App.js\";\nimport React from \"react\";\nimport Graph from \"react-graph-vis\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport GraphAfficher from \"./class/graph\";\nimport Route from \"./class/route\";\nimport Node from \"./class/node\";\nconst options = {\n  nodes: {\n    shape: \"square\",\n    size: 40\n  },\n  layout: {\n    hierarchical: false,\n    randomSeed: 0\n  },\n  interaction: {\n    dragNodes: false,\n    dragView: false\n  },\n  physics: {\n    enabled: false\n  },\n  edges: {\n    color: \"#000000\",\n    arrows: {\n      to: false\n    }\n  },\n  height: \"500px\"\n};\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.graphe = new GraphAfficher([new Node(0, 0, 0, \"green\"), new Node(1, 0, 100, \"gray\"), new Node(2, 0, 200, \"gray\"), new Node(3, 0, 300, \"gray\"), new Node(4, 0, 400, \"gray\"), new Node(5, 100, 200, \"gray\"), new Node(6, 100, 400, \"gray\"), new Node(7, 200, 0, \"gray\"), new Node(8, 200, 100, \"gray\"), new Node(9, 200, 200, \"gray\"), new Node(10, 200, 300, \"gray\"), new Node(11, 200, 400, \"gray\"), new Node(12, 300, 0, \"gray\"), new Node(13, 300, 400, \"gray\"), new Node(14, 400, 0, \"gray\"), new Node(15, 400, 100, \"red\"), new Node(16, 400, 200, \"gray\"), new Node(17, 400, 300, \"gray\"), new Node(18, 400, 400, \"gray\")], [new Route(0, 1), new Route(1, 2), new Route(2, 3), new Route(3, 4), new Route(2, 5), new Route(4, 6), new Route(5, 9), new Route(6, 11), new Route(9, 8), new Route(9, 10), new Route(10, 11), new Route(8, 7), new Route(7, 12), new Route(12, 14), new Route(14, 15), new Route(11, 13), new Route(13, 18), new Route(18, 17), new Route(17, 16), new Route(16, 15)]);\n    this.state = {\n      graphe: this.graphe\n    };\n    this.cheminActuelle = 0;\n    this.cheminLePlusCourt = 0;\n    this.tableauDesNoeudss = [];\n    this.tableauDesNoeudsFinal = [];\n  }\n\n  parcourirDijkstra() {\n    this.graphe.nodes.forEach(noeud => {\n      noeud.verifier = true;\n      this.pourDesNoeud(noeud.id);\n    });\n  }\n\n  pourDesNoeud(noeud) {\n    let edgeNoeud = this.state.graphe.edges.filter(edge => edge.to === noeud.id || edge.from === noeud.id);\n    console.log(edgeNoeud);\n    edgeNoeud.forEach(edge => {\n      console.log(\"ici\");\n\n      if (edge.to !== noeud.id && this.graphe.nodes[edge.to].verifier !== true) {\n        this.cheminActuelle++;\n        this.tableauDesNoeuds.push(this.state.graphe.nodes[edge.to]);\n        this.pourDesNoeud(this.state.graphe.nodes[edge.to]);\n        console.log(this.state.graphe.nodes[edge.to]);\n      } else if (this.graphe.nodes[edge.from].verifier !== true) {\n        this.cheminActuelle++;\n        this.tableauDesNoeuds.push(this.state.graphe.nodes[edge.from]);\n        this.pourDesNoeud(this.state.graphe.nodes[edge.from]);\n      }\n    });\n\n    if (this.cheminActuelle <= this.cheminLePlusCourt) {\n      this.cheminLePlusCourt = this.cheminActuelle;\n      this.tableauDesNoeudsFinal = this.tableauDesNoeuds;\n    }\n\n    this.cheminActuelle = 0;\n  }\n\n  render() {\n    this.parcourirDijkstra();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Graph, {\n      key: uuidv4(),\n      graph: this.state.graphe,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/React/labyrinthe/src/App.js"],"names":["React","Graph","v4","uuidv4","GraphAfficher","Route","Node","options","nodes","shape","size","layout","hierarchical","randomSeed","interaction","dragNodes","dragView","physics","enabled","edges","color","arrows","to","height","App","Component","constructor","props","graphe","state","cheminActuelle","cheminLePlusCourt","tableauDesNoeudss","tableauDesNoeudsFinal","parcourirDijkstra","forEach","noeud","verifier","pourDesNoeud","id","edgeNoeud","filter","edge","from","console","log","tableauDesNoeuds","push","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Graph from \"react-graph-vis\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport GraphAfficher from \"./class/graph\";\nimport Route from \"./class/route\";\nimport Node from \"./class/node\";\nconst options = {\n  nodes: {\n    shape: \"square\",\n    size: 40,\n  },\n  layout: {\n    hierarchical: false,\n    randomSeed: 0,\n  },\n  interaction: {\n    dragNodes: false,\n    dragView: false,\n  },\n  physics: {\n    enabled: false,\n  },\n  edges: {\n    color: \"#000000\",\n    arrows: {\n      to: false,\n    },\n  },\n  height: \"500px\",\n\n};\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.graphe = new GraphAfficher(\n      [\n        new Node(0, 0, 0, \"green\"),\n        new Node(1, 0, 100, \"gray\"),\n        new Node(2, 0, 200, \"gray\"),\n        new Node(3, 0, 300, \"gray\"),\n        new Node(4, 0, 400, \"gray\"),\n        new Node(5, 100, 200, \"gray\"),\n        new Node(6, 100, 400, \"gray\"),\n        new Node(7, 200, 0, \"gray\"),\n        new Node(8, 200, 100, \"gray\"),\n        new Node(9, 200, 200, \"gray\"),\n        new Node(10, 200, 300, \"gray\"),\n        new Node(11, 200, 400, \"gray\"),\n        new Node(12, 300, 0, \"gray\"),\n        new Node(13, 300, 400, \"gray\"),\n        new Node(14, 400, 0, \"gray\"),\n        new Node(15, 400, 100, \"red\"),\n        new Node(16, 400, 200, \"gray\"),\n        new Node(17, 400, 300, \"gray\"),\n        new Node(18, 400, 400, \"gray\"),\n      ],\n      [\n        new Route(0, 1),\n        new Route(1, 2),\n        new Route(2, 3),\n        new Route(3, 4),\n        new Route(2, 5),\n        new Route(4, 6),\n        new Route(5, 9),\n        new Route(6, 11),\n        new Route(9, 8),\n        new Route(9, 10),\n        new Route(10, 11),\n        new Route(8, 7),\n        new Route(7, 12),\n        new Route(12, 14),\n        new Route(14, 15),\n        new Route(11, 13),\n        new Route(13, 18),\n        new Route(18, 17),\n        new Route(17, 16),\n        new Route(16, 15),\n\n      ]\n    )\n    this.state = {\n      graphe: this.graphe\n    }\n    this.cheminActuelle = 0;\n    this.cheminLePlusCourt = 0;\n    this.tableauDesNoeudss = [];\n    this.tableauDesNoeudsFinal= [];\n  }\n\n  parcourirDijkstra() {\n    \n    this.graphe.nodes.forEach(noeud => {\n      noeud.verifier = true;\n      this.pourDesNoeud(noeud.id)\n    });\n\n  }\n  pourDesNoeud(noeud) {\n\n    let edgeNoeud = this.state.graphe.edges.filter(edge => (edge.to === noeud.id || edge.from === noeud.id));\n    console.log(edgeNoeud);\n    edgeNoeud.forEach(edge => {\n      console.log(\"ici\")\n      if (edge.to !== noeud.id && this.graphe.nodes[edge.to].verifier !== true) {\n        this.cheminActuelle++;\n        this.tableauDesNoeuds.push(this.state.graphe.nodes[edge.to]);\n        this.pourDesNoeud(this.state.graphe.nodes[edge.to]);\n        console.log(this.state.graphe.nodes[edge.to]);\n    \n      } else if (this.graphe.nodes[edge.from].verifier !== true) {\n        this.cheminActuelle++;\n            this.tableauDesNoeuds.push(this.state.graphe.nodes[edge.from]);\n        this.pourDesNoeud(this.state.graphe.nodes[edge.from]);\n      }\n    });\n    \n    if (this.cheminActuelle <= this.cheminLePlusCourt) {\n      this.cheminLePlusCourt = this.cheminActuelle;\n      this.tableauDesNoeudsFinal =this.tableauDesNoeuds\n    }\n    this.cheminActuelle = 0;\n    \n  }\n\n\n  render() {\n    this.parcourirDijkstra();\n    \n    return (\n      <div>\n        <Graph\n          key={uuidv4()}\n          graph={this.state.graphe}\n          options={options}\n        />\n      </div>\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}