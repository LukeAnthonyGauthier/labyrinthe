{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\labyrinthe\\\\src\\\\App.js\";\nimport React from \"react\";\nimport Graph from \"react-graph-vis\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport GraphAfficher from \"./class/graph\";\nimport Route from \"./class/route\";\nimport Node from \"./class/node\";\nimport PriorityQueue from 'priorityqueuejs';\nconst options = {\n  nodes: {\n    shape: \"square\",\n    size: 40\n  },\n  layout: {\n    hierarchical: false,\n    randomSeed: 0\n  },\n  interaction: {\n    dragNodes: false,\n    dragView: false\n  },\n  physics: {\n    enabled: false\n  },\n  edges: {\n    color: \"#000000\",\n    arrows: {\n      to: false\n    }\n  },\n  height: \"500px\"\n};\nlet timer = 0;\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.graphe = new GraphAfficher([new Node(0, 0, 0, \"green\"), new Node(1, 0, 100, \"gray\"), new Node(2, 0, 200, \"gray\"), new Node(3, 0, 300, \"gray\"), new Node(4, 0, 400, \"gray\"), new Node(5, 100, 200, \"gray\"), new Node(6, 100, 400, \"gray\"), new Node(7, 200, 0, \"gray\"), new Node(8, 200, 100, \"gray\"), new Node(9, 200, 200, \"gray\"), new Node(10, 200, 300, \"gray\"), new Node(11, 200, 400, \"gray\"), new Node(12, 300, 0, \"gray\"), new Node(13, 300, 400, \"gray\"), new Node(14, 400, 0, \"gray\"), new Node(15, 400, 100, \"red\"), new Node(16, 400, 200, \"gray\"), new Node(17, 400, 300, \"gray\"), new Node(18, 400, 400, \"gray\")], [new Route(0, 1), new Route(1, 2), new Route(2, 3), new Route(3, 4), new Route(2, 5), new Route(4, 6), new Route(5, 9), new Route(6, 11), new Route(9, 8), new Route(9, 10), new Route(10, 11), new Route(8, 7), new Route(7, 12), new Route(12, 14), new Route(14, 15), new Route(11, 13), new Route(13, 18), new Route(18, 17), new Route(17, 16), new Route(16, 15)]);\n    this.state = {\n      graphe: this.graphe\n    };\n  }\n\n  parcourirDijkstra(noeudDepart, noeudFin) {\n    this.tableauDesChemins = this.creationTableauDistance(noeudDepart);\n    let queue = this.creationQueue(noeudDepart); // pendant que la queue est encore pleine\n\n    while (!queue.isEmpty()) {\n      let noeud = queue.deq();\n      noeud.verifier = true;\n      let edgeNoeud = this.state.graphe.edges.filter(edge => edge.to === noeud.id || edge.from === noeud.id);\n      edgeNoeud.forEach(edge => {\n        if (edge.to !== noeud.id && this.graphe.nodes[edge.to].verifier !== true) {\n          let prochainNodeID = edge.to;\n          let nouvelleDistance = this.tableauDesChemins[noeud.id].distance + edge.poid;\n\n          if (this.compareDistance(prochainNodeID, nouvelleDistance, noeud)) {\n            queue.enq(this.graphe.nodes[prochainNodeID]);\n          }\n        } else if (this.graphe.nodes[edge.from].verifier !== true) {\n          let prochainNodeID = edge.from;\n          let nouvelleDistance = this.tableauDesChemins[noeud.id].distance + edge.poid;\n\n          if (this.compareDistance(prochainNodeID, nouvelleDistance, noeud)) {\n            queue.enq(this.graphe.nodes[prochainNodeID]);\n          }\n        }\n      });\n    }\n\n    this.afficherLeChemin(this.faireLeChemin(noeudFin));\n  }\n\n  creationTableauDistance(noeudDepart) {\n    return this.graphe.nodes.map(node => {\n      if (node.id === noeudDepart.id) {\n        return {\n          noeud: node.id,\n          distance: 0\n        };\n      } else {\n        return {\n          noeud: node.id,\n          distance: Number.MAX_VALUE,\n          precedent: null\n        };\n      }\n    });\n  }\n\n  creationQueue(noeudDepart) {\n    let queue = new PriorityQueue((a, b) => {\n      return b.priorite - a.priorite;\n    });\n    noeudDepart.priorite = 0;\n    queue.enq(noeudDepart);\n    return queue;\n  }\n\n  compareDistance(prochainNodeID, nouvelleDistance, noeud) {\n    if (this.tableauDesChemins[prochainNodeID].distance >= nouvelleDistance) {\n      this.tableauDesChemins[prochainNodeID].distance = nouvelleDistance;\n      this.tableauDesChemins[prochainNodeID].precedent = noeud.id;\n      this.graphe.nodes[prochainNodeID].priorite = nouvelleDistance;\n      return true;\n    }\n\n    return false;\n  }\n\n  faireLeChemin(noeudFin) {\n    let pile = [];\n    pile.push(noeudFin);\n    let noeudPrecedent = this.tableauDesChemins[noeudFin.id].precedent;\n    console.log(this.tableauDesChemins);\n\n    while (noeudPrecedent !== null) {\n      console.log(noeudPrecedent);\n      pile.push(this.graphe.nodes[noeudPrecedent]);\n\n      if (this.tableauDesChemins[noeudPrecedent].precedent != undefined) {\n        noeudPrecedent = this.tableauDesChemins[noeudPrecedent].precedent;\n      } else {\n        noeudPrecedent = null;\n      }\n    }\n\n    return pile;\n  }\n\n  afficherLeChemin(pileDuChemin) {\n    for (let i = 0; i < pileDuChemin.length; i++) {\n      let noeud = this.pileDuChemin.pop();\n\n      if (noeud.id != 15) {\n        timer += 1000;\n        noeud.verifier = true;\n        setTimeout(() => {\n          if (noeud.id !== 0) {\n            this.setState(prevState => ({\n              graphe: { ...prevState.graphe,\n                nodes: prevState.graphe.nodes.map(node => node.id === noeud.id ? { ...node,\n                  color: \"blue\"\n                } : node)\n              }\n            }));\n          }\n        }, timer);\n      }\n    }\n  }\n\n  render() {\n    this.graphe.nodes[0].verifier = true;\n    this.parcourirDijkstra(this.graphe.nodes[0], this.graphe.nodes[15]);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Graph, {\n      key: uuidv4(),\n      graph: this.state.graphe,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/React/labyrinthe/src/App.js"],"names":["React","Graph","v4","uuidv4","GraphAfficher","Route","Node","PriorityQueue","options","nodes","shape","size","layout","hierarchical","randomSeed","interaction","dragNodes","dragView","physics","enabled","edges","color","arrows","to","height","timer","App","Component","constructor","props","graphe","state","parcourirDijkstra","noeudDepart","noeudFin","tableauDesChemins","creationTableauDistance","queue","creationQueue","isEmpty","noeud","deq","verifier","edgeNoeud","filter","edge","id","from","forEach","prochainNodeID","nouvelleDistance","distance","poid","compareDistance","enq","afficherLeChemin","faireLeChemin","map","node","Number","MAX_VALUE","precedent","a","b","priorite","pile","push","noeudPrecedent","console","log","undefined","pileDuChemin","i","length","pop","setTimeout","setState","prevState","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Graph from \"react-graph-vis\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport GraphAfficher from \"./class/graph\";\nimport Route from \"./class/route\";\nimport Node from \"./class/node\";\nimport PriorityQueue from 'priorityqueuejs';\n\nconst options = {\n  nodes: {\n    shape: \"square\",\n    size: 40,\n  },\n  layout: {\n    hierarchical: false,\n    randomSeed: 0,\n  },\n  interaction: {\n    dragNodes: false,\n    dragView: false,\n  },\n  physics: {\n    enabled: false,\n  },\n  edges: {\n    color: \"#000000\",\n    arrows: {\n      to: false,\n    },\n  },\n  height: \"500px\",\n\n};\nlet timer = 0 ;\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.graphe = new GraphAfficher(\n      [\n        new Node(0, 0, 0, \"green\"),\n        new Node(1, 0, 100, \"gray\"),\n        new Node(2, 0, 200, \"gray\"),\n        new Node(3, 0, 300, \"gray\"),\n        new Node(4, 0, 400, \"gray\"),\n        new Node(5, 100, 200, \"gray\"),\n        new Node(6, 100, 400, \"gray\"),\n        new Node(7, 200, 0, \"gray\"),\n        new Node(8, 200, 100, \"gray\"),\n        new Node(9, 200, 200, \"gray\"),\n        new Node(10, 200, 300, \"gray\"),\n        new Node(11, 200, 400, \"gray\"),\n        new Node(12, 300, 0, \"gray\"),\n        new Node(13, 300, 400, \"gray\"),\n        new Node(14, 400, 0, \"gray\"),\n        new Node(15, 400, 100, \"red\"),\n        new Node(16, 400, 200, \"gray\"),\n        new Node(17, 400, 300, \"gray\"),\n        new Node(18, 400, 400, \"gray\"),\n      ],\n      [\n        new Route(0, 1),\n        new Route(1, 2),\n        new Route(2, 3),\n        new Route(3, 4),\n        new Route(2, 5),\n        new Route(4, 6),\n        new Route(5, 9),\n        new Route(6, 11),\n        new Route(9, 8),\n        new Route(9, 10),\n        new Route(10, 11),\n        new Route(8, 7),\n        new Route(7, 12),\n        new Route(12, 14),\n        new Route(14, 15),\n        new Route(11, 13),\n        new Route(13, 18),\n        new Route(18, 17),\n        new Route(17, 16),\n        new Route(16, 15),\n\n      ]\n    )\n    this.state = {\n      graphe: this.graphe\n    }\n\n  }\n  \n  parcourirDijkstra(noeudDepart, noeudFin) {\n\n    this.tableauDesChemins = this.creationTableauDistance(noeudDepart)\n\n    let queue = this.creationQueue(noeudDepart);\n\n    // pendant que la queue est encore pleine\n    while (!queue.isEmpty()) {\n      let noeud = queue.deq();\n      noeud.verifier = true;\n\n\n      let edgeNoeud = this.state.graphe.edges.filter(edge => (edge.to === noeud.id || edge.from === noeud.id));\n\n      edgeNoeud.forEach(edge => {\n        if (edge.to !== noeud.id && this.graphe.nodes[edge.to].verifier !== true) {\n          let prochainNodeID = edge.to;\n          let nouvelleDistance = this.tableauDesChemins[noeud.id].distance + edge.poid;\n          if (this.compareDistance(prochainNodeID, nouvelleDistance, noeud)) {\n            queue.enq(this.graphe.nodes[prochainNodeID]);\n          }\n\n        } else if (this.graphe.nodes[edge.from].verifier !== true) {\n          let prochainNodeID = edge.from;\n          let nouvelleDistance = this.tableauDesChemins[noeud.id].distance + edge.poid;\n          if (this.compareDistance(prochainNodeID, nouvelleDistance, noeud)) {\n            queue.enq(this.graphe.nodes[prochainNodeID]);\n          }\n        }\n      });\n    }\n    this.afficherLeChemin(this.faireLeChemin(noeudFin));\n\n  }\n  creationTableauDistance(noeudDepart) {\n    return this.graphe.nodes.map(node => {\n      if (node.id === noeudDepart.id) {\n        return {\n          noeud: node.id,\n          distance: 0,\n        }\n      } else {\n        return {\n          noeud: node.id,\n          distance: Number.MAX_VALUE,\n          precedent: null,\n        }\n      }\n    });\n  }\n\n  creationQueue(noeudDepart) {\n    let queue = new PriorityQueue((a, b) => {\n      return b.priorite - a.priorite;\n    });\n    noeudDepart.priorite = 0;\n    queue.enq(noeudDepart);\n    return queue;\n  }\n\n  compareDistance(prochainNodeID, nouvelleDistance, noeud) {\n    if (this.tableauDesChemins[prochainNodeID].distance >= nouvelleDistance) {\n      this.tableauDesChemins[prochainNodeID].distance = nouvelleDistance;\n      this.tableauDesChemins[prochainNodeID].precedent = noeud.id;\n      this.graphe.nodes[prochainNodeID].priorite = nouvelleDistance;\n      return true;\n    }\n    return false;\n  }\n  faireLeChemin(noeudFin) {\n    let pile = [];\n\n    pile.push(noeudFin);\n    let noeudPrecedent = this.tableauDesChemins[noeudFin.id].precedent;\n    console.log(this.tableauDesChemins)\n    while (noeudPrecedent !== null) {\n      console.log(noeudPrecedent);\n      pile.push(this.graphe.nodes[noeudPrecedent])\n      if (this.tableauDesChemins[noeudPrecedent].precedent != undefined) {\n        noeudPrecedent = this.tableauDesChemins[noeudPrecedent].precedent\n      } else {\n        noeudPrecedent = null;\n      }\n    }\n    return pile;\n  }\n  afficherLeChemin(pileDuChemin) {\n    for (let i = 0; i < pileDuChemin.length; i++) { \n      let noeud = this.pileDuChemin.pop();\n      if (noeud.id != 15) {\n        timer += 1000;\n  \n        noeud.verifier = true;\n  \n        setTimeout(() => {\n          if (noeud.id !== 0) {\n  \n            this.setState(prevState => ({\n              graphe: {\n                ...prevState.graphe, nodes: prevState.graphe.nodes.map(node =>\n                  node.id === noeud.id\n                    ? { ...node, color: \"blue\" }\n                    : node\n                )\n              }\n            }));\n          }\n        }, timer)\n      }\n      \n    }\n  }\n\n\n  render() {\n    this.graphe.nodes[0].verifier = true;\n    this.parcourirDijkstra(this.graphe.nodes[0], this.graphe.nodes[15]);\n\n    return (\n      <div>\n        <Graph\n          key={uuidv4()}\n          graph={this.state.graphe}\n          options={options}\n        />\n      </div>\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}